#!/usr/bin/env python

# Given a standard "kibana.yml" config file for Kibana, find all the
# configuration options and produce matching Dockerfile "ENV"
# statements.

# The output, when added to a Dockerfile creates a one-to-one mapping
# of environment variables to Kibana config options.  This allows you
# to say something like:
#
#   docker run -e 'ELASTICSEARCH_URL=http://es_host:9200' kibana
#
# which will tranlate to this inside the container:
#
#   kibana --elasticsearach.url=http://es_host:9200

import re
import sys
import yaml


def make_env_var(setting):
    return setting.upper().replace('.', '_')

config_lines = ''
with open(sys.argv[1]) as config_file:
    # Collect and uncomment all the config lines.
    for line in config_file:
        if line.startswith("# "):
            line = line[2:]
        if re.match('[\w.]*: ', line):
            config_lines += line

config = yaml.load(config_lines)


# Don't map these options through to the Dockerfile.
masked_config_options = [
    # 'elasticsearch.customHeaders',
    # 'elasticsearch.ssl.ca',
    # 'elasticsearch.ssl.cert',
    # 'elasticsearch.ssl.key',
    # 'pid.file',
    # 'server.host',
    # 'server.ssl.cert',
    # 'server.ssl.key',
]
for option in config.keys():
    if option in masked_config_options:
        del(config[option])

overrides = {
    'elasticsearch.url': 'http://elasticsearch:9200',
    'elasticsearch.username': 'elastic',
    'elasticsearch.password': 'changeme',
    'elasticsearch.requestHeadersWhitelist': 'Authorization',
    'server.basePath': '""',
    'server.ssl.cert': '',
    'server.ssl.key': '',
}

# The example config has 'your-hostname' for server.name.
# Let's have something slightly nicer.
config['server.name'] = 'kibana'

# Produce a Docker 'ENV' statement for every option.
for setting in sorted(config.keys()):
    value = overrides.get(setting, config[setting])
    environment_variable = make_env_var(setting)

    print 'ENV %s %s' % (environment_variable, value)

# Produce a docker 'CMD' statement that passes all the options to Kibana via
# command line long options.
sys.stdout.write('CMD /kibana/bin/kibana')
for setting in sorted(config.keys()):
    longopt = ' \\\n        --%s="${%s}"' % (setting, make_env_var(setting))
    sys.stdout.write(longopt)

# Produce a Markdown table for documentation (README.md)
sys.stdout.write('\n\n-%<-----Markdown Docs---%<-------\n')
sys.stdout.write('|Environment Variable|Kibana Setting|Default Value|\n')
sys.stdout.write('|:-------------------|:-------------|:------------|\n')
for setting in sorted(config.keys()):
    value = overrides.get(setting, config[setting])
    if value is None or value == '':
        value = "_Null_"
    else:
        value = '`%s`' % value
    option_doc = '| `%s` | `%s` | %s |\n' % (make_env_var(setting), setting, value)
    sys.stdout.write(option_doc)
